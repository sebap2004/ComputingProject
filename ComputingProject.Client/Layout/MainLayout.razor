 @using System.Security.Claims
@using ComputingProject.Client.Services
@using ComputingProject.Client.Themes
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject IClassroomService ClassroomService
@inject ISnackbar Snackbar

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<MudLayout>
    <MudAppBar Elevation="1">
        <MudPaper Elevation="0" Style="@($"background-color: rgba(0,0,0,0)")" Class="d-flex is-align-items-center">
            
            <MudLink Class="d-flex is-align-items-center" Href="/"><MudImage Width="48" Height="48" Src="img/HandsUp.png"></MudImage></MudLink>
            <MudLink Typo="Typo.h5" Underline="Underline.None" Href="/" Class="mr-3"><b>HandsUp</b></MudLink>
        </MudPaper>
        <CascadingAuthenticationState>
            <AuthorizeView>
                <Authorized>
                    <p>Logged in as @context.User.FindFirst(ClaimTypes.Role)?.Value - ID: @context.User.FindFirst(ClaimTypes.NameIdentifier)?.Value</p>
                </Authorized>
                <NotAuthorized>
                    <p>Not Logged In</p>
                </NotAuthorized>
            </AuthorizeView>
        </CascadingAuthenticationState>
        <MudSpacer/>
        <CascadingAuthenticationState>
            <AuthorizeView>
                <Authorized>
                    <MudButton OnClick="AttemptLogout" Class="mr-2" Variant="Variant.Filled" Color="Color.Error">Exit Session</MudButton>
                </Authorized>
                <NotAuthorized>
                </NotAuthorized>
            </AuthorizeView>
        </CascadingAuthenticationState>
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle"/>
    </MudAppBar>
    <MudMainContent Class="mt-16 pa-4 pb-0" Style="min-height: calc(100vh - var(--mud-appbar-height))">
        @Body
    </MudMainContent>
</MudLayout>

 <MudDialog @ref="StudentConfirmExitDialog" OnBackdropClick="_ => { }">
     <TitleContent>
         <MudText Typo="Typo.h5">BEFORE YOU GO</MudText>
         <MudText>Please make sure to fill out the survey asking about your experience with this software</MudText>
     </TitleContent>
     <DialogContent>
<MudButton Href="https://www.youtube.com/" Target="_blank" FullWidth="true" OnClick="() => HasPressedSurveyButton = true" Variant="Variant.Filled" Color="Color.Primary">Survey Link</MudButton>
     </DialogContent>
     <DialogActions>
         <MudButton OnClick="Cancel">Cancel</MudButton>
         <MudButton OnClick="LogOut" Disabled="!HasPressedSurveyButton" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Ok</MudButton>
     </DialogActions>
 </MudDialog>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;
    private DotNetObjectReference<MainLayout> NetRef;

    private MudDialog StudentConfirmExitDialog;
    
    private bool HasPressedSurveyButton { get; set; }

    protected override Task OnInitializedAsync()
    {
        NetRef = DotNetObjectReference.Create(this);
        return Task.CompletedTask;
    }
    
    private void Cancel() => StudentConfirmExitDialog.CloseAsync();
    
    private void HandleLogin()
    {
        if (!HasPressedSurveyButton) return;
        Navigation.NavigateTo("/");
    }
    
    [JSInvokable]
    public async Task BeforeUnloadStudentView()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.FindFirst(ClaimTypes.Role)?.Value == "Student")
        {
            await StudentConfirmExitDialog.ShowAsync();
        }
    }

    public async Task AttemptLogout()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.FindFirst(ClaimTypes.Role)?.Value == "Student")
        {
           await StudentConfirmExitDialog.ShowAsync();
        }
    }

    public async Task LogOut()
    {
        var response = await HttpClient.PostAsync("api/auth/logout", null);
        if (response.IsSuccessStatusCode)
        {
            if (AuthStateProvider is CookieAuthenticationStateProvider customProvider)
            {
                customProvider.NotifyAuthenticationStateChanged();
                Navigation.NavigateTo("/");
                await ClassroomService.StopAsync();
                Snackbar.Add("Logged out successfully.", Severity.Success);
            }
        }
        else
        {
            Snackbar.Add("Error logging out", Severity.Error);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _theme = new DefaultTheme();
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }
    

    private string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.LightMode,
        false => Icons.Material.Outlined.DarkMode,
    };

}


