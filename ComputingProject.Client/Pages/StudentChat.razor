@page "/student"
@using System.Security.Claims
@using ComputingProject.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@rendermode InteractiveWebAssembly
@inject ISnackbar Snackbar
@inject IClassroomService ClassroomService
@inject IClassroomServer ClassroomServer

<CascadingAuthenticationState>
    <AuthorizeView Roles="Student">
        @if (ClassroomService.IsConnected())
        {
            <div class="d-flex flex-column flex-grow-1 gap-4" style="height: 84vh">
                <MudPaper MinHeight="95%" Class="overflow-auto" id="chatscroll">
                    @foreach (var message in messages)
                    {
                        if (message.systemMessage)
                        {
                            <MudAlert ContentAlignment="HorizontalAlignment.Center" Severity="Severity.Info" Dense="true">@message.message</MudAlert>
                        }
                        else
                        {
                            if (message.user == UserName)
                            {
                                <MudChat Color="Color.Info" ChatPosition="ChatBubblePosition.End">
                                    <MudChatHeader Name="@message.user" />
                                    <MudChatBubble>@message.message</MudChatBubble>
                                </MudChat>
                            }
                            else
                            {
                                <MudChat Color="Color.Secondary" ChatPosition="ChatBubblePosition.Start">
                                    <MudChatHeader Name="@message.user" />
                                    <MudChatBubble>@message.message</MudChatBubble>
                                </MudChat>
                            }
                        }
                    }
                </MudPaper>
                <MudPaper Height="10%" Class="h-10">
                    <div class="d-flex flex-grow-1 gap-4">
                        <MudPaper Width="89%">
                            <MudTextField @bind-Value="MessageInput" Immediate="true" Variant="Variant.Outlined" @onkeydown="@Enter" Label="Message"/>
                        </MudPaper>
                        <MudPaper Width="10%" Class="d-flex justify-center">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="Send">Send Message</MudButton>
                        </MudPaper>
                    </div>
                </MudPaper>
            </div>
        }
        else
        {
            <MudText Typo="Typo.h2">Connecting...</MudText>
        }
    </AuthorizeView>
    <AuthorizeView Roles="Teacher">
        <Authorized>
            <MudText>You are logged in as @context.User.Identity.Name</MudText>
            <MudText>You are not meant to see this.</MudText>
        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    ClassroomState currentState;
    private List<Message> messages = new List<Message>();
    private string UserName { get; set; }
    private string UserRole { get; set; }
    private string MessageInput;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            UserName = user.FindFirst(ClaimTypes.Name)?.Value ?? "Unknown";
            UserRole = user.FindFirst(ClaimTypes.Role)?.Value ?? "No role";
        }
        _ = ConnectToHub();
    }

    public async Task ConnectToHub()
    {
        ClassroomService.OnMessageReceived += (puser, pmessage, system) =>
        {
            Message message = new Message()
            {
                user = puser,
                message = pmessage,
                systemMessage = system
            };
            messages.Add(message);
            
            StateHasChanged();
            
            JSRuntime.InvokeVoidAsync("scrollToBottom", "chatscroll");
        };
        
        ClassroomService.OnJoinGetState += state =>
        {
            currentState = state;
            Snackbar.Add("HOly shit received the state: " + state, currentState == ClassroomState.Lecture ? Severity.Success : Severity.Warning);
        };
        
        try 
        {
            await ClassroomService.StartAsync();
    
            // Wait for the connection to be fully established
            while (!ClassroomService.IsConnected())
            {
                await Task.Delay(100);  // Short delay to prevent tight loop
            }

            Console.WriteLine(ClassroomServer);
            Console.WriteLine(ClassroomService);
    
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopLeft;
            Snackbar.Add("Successfully connected to chat as " + UserName, Severity.Success);

            await InvokeAsync(StateHasChanged);
    
            await ClassroomServer.SendMessage(UserName, UserName + " has joined the chat!", true);
        }
        catch (Exception ex)
        {
            // Handle connection errors
            Snackbar.Add("Failed to connect to chat: " + ex.Message, Severity.Error);
        }
    }

    async Task Send()
    {
        if (string.IsNullOrWhiteSpace(MessageInput)) return;
    
        var tempMessage = MessageInput;
        MessageInput = string.Empty; // Clear input before sending
        StateHasChanged(); // Ensure UI updates before sending the message

        await ClassroomServer.SendMessage(UserName, tempMessage, false);
    }

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Send();
        }
    }

    public struct Message
    {
        public string user;
        public string message;
        public bool systemMessage;
    }

}