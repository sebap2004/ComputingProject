@using System.Security.Claims
@using ComputingProject.Client.Services
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@rendermode InteractiveWebAssembly
@inject ISnackbar Snackbar
@inject IClassroomService ClassroomService
@inject IClassroomServer ClassroomServer

@if (ClassroomService.IsConnected())
{
    <div class="d-flex flex-column flex-grow-1 gap-4" style="height: 84vh">
        <MudPaper MinHeight="95%" Class="overflow-auto" id="chatscroll">
            @foreach (var message in messages)
            {
                if (message.systemMessage)
                {
                    <MudAlert ContentAlignment="HorizontalAlignment.Center" Severity="Severity.Info" Dense="true">@message.message</MudAlert>
                }
                else
                {
                    if (message.user == UserName)
                    {
                        <MudChat Color="Color.Info" ChatPosition="ChatBubblePosition.End">
                            <MudChatHeader Name="@message.user" />
                            <MudChatBubble>@message.message</MudChatBubble>
                        </MudChat>
                    }
                    else
                    {
                        <MudChat Color="Color.Secondary" ChatPosition="ChatBubblePosition.Start">
                            <MudChatHeader Name="@message.user" />
                            <MudChatBubble>@message.message</MudChatBubble>
                        </MudChat>
                    }
                }
            }
        </MudPaper>
        <MudPaper Height="10%" Class="h-10">
            <div class="d-flex flex-grow-1 gap-4">
                <MudPaper Width="60%">
                    <MudTextField @bind-Value="MessageInput" Immediate="true" Variant="Variant.Outlined" @onkeydown="@Enter" Label="Message"/>
                </MudPaper>
                <MudPaper Width="10%" Class="d-flex justify-center">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="Send">Send Message</MudButton>
                </MudPaper>
                <MudPaper Width="10%" Class="d-flex justify-center">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="SetSeminarState">Set To Seminar</MudButton>
                </MudPaper>
                <MudPaper Width="10%" Class="d-flex justify-center">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="SetLectureState">Set To Lecture</MudButton>
                </MudPaper>
            </div>
        </MudPaper>
    </div>
}
else
{
    <MudText Typo="Typo.h2">Connecting...</MudText>
    <CascadingAuthenticationState>
        <AuthorizeView>
            <Authorized>
                <MudText>You are logged in as @context.User.Identity.Name</MudText>
            </Authorized>
            <NotAuthorized>
                <MudText>You are not logged in. <a href="/teacher-login">Login</a></MudText>
            </NotAuthorized>
        </AuthorizeView>
    </CascadingAuthenticationState>
}

@code {
    ClassroomState currentState;
    private List<Message> messages = new List<Message>();
    private string UserName { get; set; }
    private string UserRole { get; set; }
    private string MessageInput;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            UserName = user.FindFirst(ClaimTypes.Name)?.Value ?? "Unknown";
            UserRole = user.FindFirst(ClaimTypes.Role)?.Value ?? "No role";
        }
        _ = ConnectToHub();
    }

    public async Task ConnectToHub()
    {
        ClassroomService.OnMessageReceived += (puser, pmessage, system) =>
        {
            Message message = new Message()
            {
                user = puser,
                message = pmessage,
                systemMessage = system
            };
            messages.Add(message);
            
            StateHasChanged();
            
            JSRuntime.InvokeVoidAsync("scrollToBottom", "chatscroll");
        };

        ClassroomService.OnJoinGetState += state =>
        {
            currentState = state;
            Snackbar.Add("HOly shit received the state: " + state, currentState == ClassroomState.Lecture ? Severity.Success : Severity.Warning);
        };

        Console.WriteLine("Registered events");
        
        try 
        {
            await ClassroomService.StartAsync();
    
            // Wait for the connection to be fully established
            while (!ClassroomService.IsConnected())
            {
                await Task.Delay(100);
                // Short delay to prevent tight loop
            }

            Console.WriteLine(ClassroomServer);
            Console.WriteLine(ClassroomService);
    
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopLeft;
            Snackbar.Add("Successfully connected to classroom as " + UserName, Severity.Success);
            await InvokeAsync(StateHasChanged);
            await ClassroomServer.GetClassroomState(UserName);
            Console.WriteLine("Called get classroom state");
        }
        catch (Exception ex)
        {
            // Handle connection errors
            Snackbar.Add("Failed to connect to classroom: " + ex.Message, Severity.Error);
        }
    }

    async Task Send()
    {
        if (string.IsNullOrWhiteSpace(MessageInput)) return;
    
        var tempMessage = MessageInput;
        MessageInput = string.Empty; // Clear input before sending
        StateHasChanged(); // Ensure UI updates before sending the message

        await ClassroomServer.SendMessage(UserName, tempMessage, false);
    }

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Send();
        }
    }
    
    public async Task SetSeminarState()
    {
        await ClassroomServer.SetClassroomState(ClassroomState.Seminar);
    }
    
    public async Task SetLectureState()
    {
        await ClassroomServer.SetClassroomState(ClassroomState.Lecture);
    }

    public struct Message
    {
        public string user;
        public string message;
        public bool systemMessage;
    }

}