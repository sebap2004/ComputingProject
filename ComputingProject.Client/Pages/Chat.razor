@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@rendermode InteractiveWebAssembly

<h3>Chat</h3>

@if (IsConnected)
{
    <div class="d-flex flex-column flex-grow-1 gap-4">
        <MudPaper MinHeight="90%">
            <ul id="messagesList">
                @foreach (var message in messages)
                {
                    if (message.user == UserInput)
                    {
                        <MudChat ChatPosition="ChatBubblePosition.End">
                            <MudChatHeader Name="@message.user" />
                            <MudChatBubble>@message.message</MudChatBubble>
                        </MudChat>
                    }
                    else
                    {
                        <MudChat ChatPosition="ChatBubblePosition.Start">
                            <MudChatHeader Name="@message.user" />
                            <MudChatBubble>@message.message</MudChatBubble>
                        </MudChat>
                    }
                }
            </ul>
        </MudPaper>
        <MudPaper Height="10%">
            <div class="d-flex flex-grow-1 gap-4">
                <MudPaper Width="30%">
                    <MudTextField Class="flex" @bind-Value="UserInput" Variant="Variant.Outlined" Label="Name"/>
                </MudPaper>
                <MudPaper Width="50%">
                    <MudTextField @bind-Value="MessageInput" Variant="Variant.Outlined" Label="Message"/>
                </MudPaper>
                <MudPaper Width="20%" Class="d-flex justify-center align-content-center">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="Send">Send Message</MudButton>
                </MudPaper>
            </div>
        </MudPaper>
    </div>
}
else
{
    <span>Connecting...</span>
}

@code {
    private HubConnection _hubConnection;
    private List<Message> messages = new List<Message>();
    private string UserInput { get; set; }
    private string MessageInput;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/chatHub")).Build();

        _hubConnection.On<string, string>("ReceiveMessage", (puser, pmessage) =>
        {
            Message message = new Message()
            {
                user = puser,
                message = pmessage
            };
            messages.Add(message);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    Task Send() => _hubConnection.SendAsync("SendMessage", UserInput, MessageInput);

    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;
    
    public struct Message
    {
        public string user;
        public string message;
    }

}